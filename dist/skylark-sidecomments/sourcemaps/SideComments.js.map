{"version":3,"sources":["SideComments.js"],"names":["define","skylark","langx","$","Section","SideComments","Emitter","inherit","_construct","el","currentUser","existingComments","this","$el","$body","eventPipe","clone","sections","activeSection","on","bind","showComments","hideComments","sectionSelected","sectionDeselected","commentPosted","commentDeleted","addCommentAttempted","bodyClick","initialize","self","forEach","find","section","$section","sectionId","data","toString","sectionComments","comment","push","addClass","deselect","removeClass","e","emit","insertComment","id","removeComment","commentId","deleteComment","commentsAreVisible","hasClass","event","$target","target","closest","length","setCurrentUser","render","removeCurrentUser","destroy","off","attach"],"mappings":";;;;;;;AAAAA,QACE,wBACA,sBACA,iBACA,aACA,SAASC,EAAQC,EAAOC,EAAGC,GAgB1B,IAAIC,EAAeH,EAAMI,QAAQC,SAC9BC,WAAa,SAAWC,EAAIC,EAAaC,GACvCC,KAAKC,IAAMV,EAAEM,GACbG,KAAKE,MAAQX,EAAE,QACfS,KAAKG,UAAY,IAAIb,EAAMI,QAE3BM,KAAKF,YAAcR,EAAMc,MAAMN,IAAgB,KAC/CE,KAAKD,iBAAmBT,EAAMc,MAAML,OACpCC,KAAKK,YACLL,KAAKM,cAAgB,KAGrBN,KAAKG,UAAUI,GAAG,eAAgBjB,EAAMkB,KAAKR,KAAKS,aAAcT,OAChEA,KAAKG,UAAUI,GAAG,eAAgBjB,EAAMkB,KAAKR,KAAKU,aAAcV,OAChEA,KAAKG,UAAUI,GAAG,kBAAmBjB,EAAMkB,KAAKR,KAAKW,gBAAiBX,OACtEA,KAAKG,UAAUI,GAAG,oBAAqBjB,EAAMkB,KAAKR,KAAKY,kBAAmBZ,OAC1EA,KAAKG,UAAUI,GAAG,gBAAiBjB,EAAMkB,KAAKR,KAAKa,cAAeb,OAClEA,KAAKG,UAAUI,GAAG,iBAAkBjB,EAAMkB,KAAKR,KAAKc,eAAgBd,OACpEA,KAAKG,UAAUI,GAAG,sBAAuBjB,EAAMkB,KAAKR,KAAKe,oBAAqBf,OAC9EA,KAAKE,MAAMK,GAAG,QAASjB,EAAMkB,KAAKR,KAAKgB,UAAWhB,OAClDA,KAAKiB,WAAWjB,KAAKD,mBAMvBkB,WAAa,SAAUlB,GACrB,IAAImB,EAAOlB,KACXV,EAAM6B,QAAQnB,KAAKC,IAAImB,KAAK,wBAAyB,SAAUC,GAC7D,IAAIC,EAAW/B,EAAE8B,GACbE,EAAYD,EAASE,KAAK,cAAcC,WACxCC,EAAkBpC,EAAM8B,KAAKF,EAAKnB,iBAAkB,SAAS4B,GAC/D,OAAOA,EAAQJ,WAAaA,IAG9BL,EAAKb,SAASuB,KAAK,IAAIpC,EAAQ0B,EAAKf,UAAWmB,EAAUJ,EAAKpB,YAAa4B,OAO/EjB,aAAe,WACbT,KAAKC,IAAI4B,SAAS,uBAMpBnB,aAAe,WACTV,KAAKM,gBACPN,KAAKM,cAAcwB,WACnB9B,KAAKM,cAAgB,MAGvBN,KAAKC,IAAI8B,YAAY,uBAOvBpB,gBAAkB,SAAUqB,EAAEX,GAC5BrB,KAAKS,eAEDT,KAAKM,eACPN,KAAKM,cAAcwB,WAGrB9B,KAAKM,cAAgBe,GAOvBT,kBAAoB,SAAUoB,EAAEX,GAC9BrB,KAAKU,eACLV,KAAKM,cAAgB,MAOvBO,cAAgB,SAAUmB,EAAEL,GAC1B3B,KAAKiC,KAAK,gBAAiBN,IAO7Bb,eAAiB,SAAUkB,EAAEL,GAC3B3B,KAAKiC,KAAK,iBAAkBN,IAO9BZ,oBAAsB,WACpBf,KAAKiC,KAAK,wBAOZC,cAAgB,SAAUP,GACVrC,EAAM8B,KAAKpB,KAAKK,SAAU,SAASgB,GAC/C,OAAOA,EAAQc,IAAMR,EAAQJ,YAEvBW,cAAcP,IAQxBS,cAAgB,SAAUb,EAAWc,GACrB/C,EAAM8B,KAAKpB,KAAKK,SAAU,SAASgB,GAC/C,OAAOA,EAAQc,IAAMZ,IAEfa,cAAcC,IAQxBC,cAAgB,SAAUf,EAAWc,GACrB/C,EAAM8B,KAAKpB,KAAKK,SAAU,SAASgB,GAC/C,OAAOA,EAAQc,IAAMZ,IAEfe,cAAcD,IAOxBE,mBAAqB,WACnB,OAAOvC,KAAKC,IAAIuC,SAAS,uBAO3BxB,UAAY,SAAUyB,GACpB,IAAIC,EAAUnD,EAAEkD,EAAME,QAKlBD,EAAQE,QAAQ,iBAAiBC,OAAS,GAAKH,EAAQE,QAAQ,QAAQC,OAAS,IAC9E7C,KAAKM,eACPN,KAAKM,cAAcwB,WAErB9B,KAAKU,iBAQToC,eAAiB,SAAUhD,GACzBE,KAAKU,eACLV,KAAKF,YAAcA,EACnBR,EAAM6B,QAAQnB,KAAKK,SAAU,SAAUgB,GACrCA,EAAQvB,YAAcE,KAAKF,YAC3BuB,EAAQ0B,YAOZC,kBAAoB,WAClBhD,KAAKU,eACLV,KAAKF,YAAc,KACnBR,EAAM6B,QAAQnB,KAAKK,SAAU,SAAUgB,GACrCA,EAAQvB,YAAc,KACtBuB,EAAQ0B,YAOZE,QAAU,WACRjD,KAAKU,eACLV,KAAKC,IAAIiD,SAOf,OAAO7D,EAAQ8D,OAAO,qBAAsB1D","file":"../SideComments.js","sourcesContent":["define([\n  \"skylark-langx/skylark\",\n  \"skylark-langx/langx\",\n  \"skylark-jquery\",\n  \"./Section\"\n],function(skylark,langx, $, Section){\n\n  /**\n   * Creates a new SideComments instance.\n   * @param {Object} el               The selector for the element for\n   *                                  which side comments need to be initialized\n   * @param {Object} currentUser      An object defining the current user. Used\n   *                                  for posting new comments and deciding\n   *                                  whether existing ones can be deleted\n   *                                  or not.\n   * @param {Array} existingComments An array of existing comments, in\n   *                                 the proper structure.\n   * \n   * TODO: **GIVE EXAMPLE OF STRUCTURE HERE***\n   */\n\n   var SideComments = langx.Emitter.inherit({\n      _construct : function ( el, currentUser, existingComments ) {\n        this.$el = $(el);\n        this.$body = $('body');\n        this.eventPipe = new langx.Emitter();\n\n        this.currentUser = langx.clone(currentUser) || null;\n        this.existingComments = langx.clone(existingComments) || [];\n        this.sections = [];\n        this.activeSection = null;\n        \n        // Event bindings\n        this.eventPipe.on('showComments', langx.bind(this.showComments, this));\n        this.eventPipe.on('hideComments', langx.bind(this.hideComments, this));\n        this.eventPipe.on('sectionSelected', langx.bind(this.sectionSelected, this));\n        this.eventPipe.on('sectionDeselected', langx.bind(this.sectionDeselected, this));\n        this.eventPipe.on('commentPosted', langx.bind(this.commentPosted, this));\n        this.eventPipe.on('commentDeleted', langx.bind(this.commentDeleted, this));\n        this.eventPipe.on('addCommentAttempted', langx.bind(this.addCommentAttempted, this));\n        this.$body.on('click', langx.bind(this.bodyClick, this));\n        this.initialize(this.existingComments);\n      },\n\n      /**\n       * Adds the comments beside each commentable section.\n       */\n      initialize : function( existingComments ) {\n        var self = this;\n        langx.forEach(this.$el.find('.commentable-section'), function( section ){\n          var $section = $(section);\n          var sectionId = $section.data('section-id').toString();\n          var sectionComments = langx.find(self.existingComments, function(comment){\n            return comment.sectionId == sectionId;\n          });\n\n          self.sections.push(new Section(self.eventPipe, $section, self.currentUser, sectionComments));\n        });\n      },\n\n      /**\n       * Shows the side comments.\n       */\n      showComments : function() {\n        this.$el.addClass('side-comments-open');\n      },\n\n      /**\n       * Hide the comments.\n       */\n      hideComments : function() {\n        if (this.activeSection) {\n          this.activeSection.deselect();\n          this.activeSection = null;\n        }\n\n        this.$el.removeClass('side-comments-open');\n      },\n\n      /**\n       * Callback after a section has been selected.\n       * @param  {Object} section The Section object to be selected.\n       */\n      sectionSelected : function( e,section ) {\n        this.showComments();\n\n        if (this.activeSection) {\n          this.activeSection.deselect();\n        }\n        \n        this.activeSection = section;\n      },\n\n      /**\n       * Callback after a section has been deselected.\n       * @param  {Object} section The Section object to be selected.\n       */\n      sectionDeselected : function( e,section ) {\n        this.hideComments();\n        this.activeSection = null;\n      },\n\n      /**\n       * Fired when the commentPosted event is triggered.\n       * @param  {Object} comment  The comment object to be posted.\n       */\n      commentPosted : function( e,comment ) {\n        this.emit('commentPosted', comment);\n      },\n\n      /**\n       * Fired when the commentDeleted event is triggered.\n       * @param  {Object} comment  The commentId of the deleted comment.\n       */\n      commentDeleted : function( e,comment ) {\n        this.emit('commentDeleted', comment);\n      },\n\n      /**\n       * Fire an event to to signal that a comment as attempted to be added without\n       * a currentUser.\n       */\n      addCommentAttempted : function() {\n        this.emit('addCommentAttempted');\n      },\n\n      /**\n       * Inserts the given comment into the right section.\n       * @param  {Object} comment A comment to be inserted.\n       */\n      insertComment : function( comment ) {\n        var section = langx.find(this.sections, function(section){\n          return section.id == comment.sectionId \n        });\n        section.insertComment(comment);\n      },\n\n      /**\n       * Removes the given comment from the right section.\n       * @param sectionId The ID of the section where the comment exists.\n       * @param commentId The ID of the comment to be removed.\n       */\n      removeComment : function( sectionId, commentId ) {\n        var section = langx.find(this.sections, function(section){\n          return section.id == sectionId \n        });\n        section.removeComment(commentId);\n      },\n\n      /**\n       * Delete the comment specified by the given sectionID and commentID.\n       * @param sectionId The section the comment belongs to.\n       * @param commentId The comment's ID\n       */\n      deleteComment : function( sectionId, commentId ) {\n        var section = langx.find(this.sections, function(section){\n          return section.id == sectionId \n        });\n        section.deleteComment(commentId);\n      },\n\n      /**\n       * Checks if comments are visible or not.\n       * @return {Boolean} Whether or not the comments are visible.\n       */\n      commentsAreVisible : function() {\n        return this.$el.hasClass('side-comments-open');\n      },\n\n      /**\n       * Callback for body clicks. We hide the comments if someone clicks outside of the comments section.\n       * @param  {Object} event The event object.\n       */\n      bodyClick : function( event ) {\n        var $target = $(event.target);\n        \n        // We do a check on $('body') existing here because if the $target has\n        // no parent body then it's because it belongs to a deleted comment and \n        // we should NOT hide the SideComments.\n        if ($target.closest('.side-comment').length < 1 && $target.closest('body').length > 0) {\n          if (this.activeSection) {\n            this.activeSection.deselect();\n          }\n          this.hideComments();\n        }\n      },\n\n      /**\n       * Set the currentUser and update the UI as necessary.\n       * @param {Object} currentUser The currentUser to be used.\n       */\n      setCurrentUser : function( currentUser ) {\n        this.hideComments();\n        this.currentUser = currentUser;\n        langx.forEach(this.sections, function( section ) {\n          section.currentUser = this.currentUser;\n          section.render();\n        });\n      },\n\n      /**\n       * Remove the currentUser and update the UI as necessary.\n       */\n      removeCurrentUser : function() {\n        this.hideComments();\n        this.currentUser = null;\n        langx.forEach(this.sections, function( section ) {\n          section.currentUser = null;\n          section.render();\n        });\n      },\n\n      /**\n       * Destroys the instance of SideComments, including unbinding from DOM events.\n       */\n      destroy : function() {\n        this.hideComments();\n        this.$el.off();\n      }\n\n   });\n\n\n\n  return skylark.attach(\"intg.SlideComments\", SideComments);\n\n});\n"]}